name: "push-to-niployments"
description: |
  Push a versioned image, built from this project, to NIployments' Image Registry

inputs:
  project_name:
    description: |
      The name of the project under which to store the generated image artifact. If this project does not exist in the registry, this action will try to create it.
    required: false
  repository_name:
    description: |
      The name of the repository, stored under "project_name", to which the new image artifact should be pushed
    required: false

  # Due to limitations in composite runners, this is, in my opinion, the best way to do this.
  # See https://github.com/orgs/community/discussions/49689 for more details.
  # TLDR: apparently the 'vars' and the 'secrets' contexts are not available to composite runners.
  NIPLOYMENTS_REGISTRY_URL:
    description: |
      The URL of the NIployments' Image Registry
    required: true
  NIPLOYMENTS_REGISTRY_USERNAME:
    description: |
      The username used to authenticate with the NIployments' Image Registry
    required: true
  NIPLOYMENTS_REGISTRY_PASSWORD:
    description: |
      The password used to authenticate with the NIployments' Image Registry
    required: true

runs:
  using: "composite"
  steps:
    - name: "Parse project and repository name"
      id: "name-parsing"
      run: ./scripts/get-project-and-repository-names.sh
      shell: bash
      env:
        GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
        INPUT_PROJECT_NAME: ${{ inputs.project_name }}
        INPUT_REPOSITORY_NAME: ${{ inputs.repository_name }}

    - name: Login to NIployments registry
      uses: docker/login-action@v1
      with:
        # These are the values of the Dev cluster.
        registry: ${{ inputs.NIPLOYMENTS_REGISTRY_URL }}
        username: ${{ inputs.NIPLOYMENTS_REGISTRY_USERNAME }}
        password: ${{ inputs.NIPLOYMENTS_REGISTRY_PASSWORD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Checkout
      uses: actions/checkout@v4

    - name: Fetch latest published version if it exists.
      run: ./scripts/get-and-bump-version.sh
      shell: bash

    - name: Generate new tag for project image
      id: tag
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.NIPLOYMENTS_REGISTRY_URL }}/${{ steps.name-parsing.outputs.PROJECT_NAME }}/${{ steps.name-parsing.outputs.REPOSITORY_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        push: true
        tags: ${{ steps.tag.outputs.tags }}
        labels: ${{ steps.tag.outputs.labels }}
